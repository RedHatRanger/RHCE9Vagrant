VAGRANTFILE_API_VERSION = "2"
VAGRANT_DISABLE_VBOXSYMLINKCREATE = "1"
file_to_disk1 = './disk-0-1.qcow2'
file_to_disk2 = './disk-0-2.qcow2'
file_to_disk3 = './disk-0-3.qcow2'
file_to_disk4 = './disk-0-4.qcow2'
file_to_disk5 = './disk-1-3.qcow2'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Use same SSH key for each machine
  config.ssh.insert_key = false
  config.vm.box_check_update = false

  # Repo
  config.vm.define "repo" do |repo|
    repo.vm.box = "rockylinux/9"    
    repo.vm.provider "libvirt" do |repo|
      repo.memory = "1024"
      unless File.exist?(file_to_disk5)
        repo.disk :file, :size => "2G", :path => file_to_disk5
      end
    end
    repo.vm.provision :shell, :inline => "pvs | grep '/dev/vdb' && echo 'The disk was already expanded!' || (pvcreate /dev/vdb; vgextend rhel_rhel8 /dev/vdb; lvextend -l +100%FREE /dev/rhel_rhel8/root; xfs_growfs /dev/rhel_rhel8/root)"
    repo.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"
    repo.vm.provision :shell, :inline => "yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y; sudo yum install -y sshpass python3-pip python3-devel httpd sshpass vsftpd createrepo", run: "always"
    repo.vm.provision :shell, :inline => "python3 -m pip install -U pip; python3 -m pip install pexpect; python3 -m pip install ansible", run: "always"
    repo.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
    repo.vm.network "private_network", ip: "192.168.55.199"
  end

  # Node 1
  config.vm.define "node1" do |node1|
    node1.vm.box = "rockylinux/9"
    node1.vm.network "private_network", ip: "192.168.55.201"
    node1.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.qcow2"]
    node1.vm.provider "libvirt" do |node1|
      node1.memory = "1024"
      unless File.exist?(file_to_disk1)
        node1.disk :file, :size => "2G", :path => file_to_disk1
      end
    end
    node1.vm.provision "shell", inline: <<-SHELL
      yes | sudo mkfs.ext4 /dev/vdb
    SHELL
    node1.vm.synced_folder ".", "/vagrant"
  end

  # Node 2
  config.vm.define "node2" do |node2|
    node2.vm.box = "rockylinux/9"
    node2.vm.network "private_network", ip: "192.168.55.202"
    node2.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.qcow2"]
    node2.vm.provider "libvirt" do |node2|
      node2.memory = "1024"
      unless File.exist?(file_to_disk2)
        node2.disk :file, :size => "2G", :path => file_to_disk2
      end
    end
    node2.vm.provision "shell", inline: <<-SHELL
      yes | sudo mkfs.ext4 /dev/vdb
    SHELL
    node2.vm.synced_folder ".", "/vagrant"
  end

  # Node 3
  config.vm.define "node3" do |node3|
    node3.vm.box = "rockylinux/9"
    node3.vm.network "private_network", ip: "192.168.55.203"
    node3.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.qcow2"]
    node3.vm.provider "libvirt" do |node3|
      node3.memory = "512"
      unless File.exist?(file_to_disk3)
        node3.disk :file, :size => "2G", :path => file_to_disk3
      end
    end
    node3.vm.provision "shell", inline: <<-SHELL
      yes | sudo mkfs.ext4 /dev/vdb
    SHELL
    node3.vm.synced_folder ".", "/vagrant"
  end

  # Node 4
  config.vm.define "node4" do |node4|
    node4.vm.box = "rockylinux/9"
    node4.vm.network "private_network", ip: "192.168.55.204"
    node4.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.qcow2"]
    node4.vm.provider "libvirt" do |node4|
      node4.memory = "512"
      unless File.exist?(file_to_disk4)
        node4.disk :file, :size => "2G", :path => file_to_disk4
      end
    end
    node4.vm.provision "shell", inline: <<-SHELL
      yes | sudo mkfs.ext4 /dev/vdb
    SHELL
    node4.vm.synced_folder ".", "/vagrant"
  end

  # Control Node
  config.vm.define "control" do |control|
    control.vm.box = "rockylinux/9"
    control.vm.network "private_network", ip: "192.168.55.200"
    control.vm.provider :libvirt do |control|
      control.memory = "2048"
    end
    control.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "*.qcow2"]
    control.vm.provision :ansible_local do |ansible|
      ansible.playbook = "/vagrant/playbooks/master.yml"
      ansible.install = false
      ansible.compatibility_mode = "2.0"
      ansible.inventory_path = "/vagrant/inventory"
      ansible.config_file = "/vagrant/ansible.cfg"
      ansible.limit = "all"
    end
  end
end
